<!DOCTYPE html>
<html>
<head>
    <title>Stock Trading Bot</title>
</head>
<body>
    <h1>Stock Trading Bot</h1>

    <div>
        <label>Stock Symbol:</label>
        <input id="symbol" type="text" placeholder="BTC-USD">
    </div>
    
    <br>

    <button onclick="getPrediction()">Get Prediction</button>

    <div id="prediction"></div>

    <script src="app.js"></script>

</body>
</html>



//Intrinsic Time prediction

First, let's load stock data of a company from yahoo finance using pandas datareader:
//python
import pandas as pd
import pandas_datareader as pdr
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense


symbol = 'BTC-USD'
start_date = '2016-01-01'
end_date = '2023-09-16'

df = pdr.get_data_yahoo(symbol, start=start_date, end=end_date)

df['return'] = df['Adj Close'].pct_change()

df = df.dropna()

scaler = MinMaxScaler(feature_range=(0,1))
df['return'] = scaler.fit_transform(np.array(df['return']).reshape(-1,1))

train_size = int(len(df)*0.7)

x_train, y_train = [],[]
for i in range(60, train_size):
    x_train.append(df['return'][i-60:i])
    y_train.append(df['return'][i])

x_train, y_train = np.array(x_train), np.array(y_train)

# reshape x_train to 3 dimensions: [samples, time steps, features]
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(units=50))
model.add(Dense(1))

model.compile(loss='mean_squared_error', optimizer='adam')
model.fit(x_train, y_train, epochs=1, batch_size=1, verbose=2)

x_test = np.array(df['return'][train_size-60:])
x_test = np.reshape(x_test, (x_test.shape[0], 1, x_test.shape[1]))

predicted_price = model.predict(x_test)
predicted_price = scaler.inverse_transform(predicted_price)


Make sure you substitute 'python' for 'tensorflow' when you import 'keras' as 'python' will not be recognized as a known module.
