./trade_bot_backend
├───src
│   ├───controllers  # Define actions to perform for different requests
│   │   ├───trade_controller.js  # Handles all requests related to trades
│   ├───scripts
│   │   ├───fetch_data.py  # Python script for fetching crypto data and preparing the data
│   │   ├───train_model.py  # Python script for model training
│   │   └───predict.py  # Python script for predicting
│   ├───routes
│   │   ├───trade_routes.js  # Defines routes and maps to controllers for trades
│   ├───models
│   │   ├───trade_model.js  # Defines the model for trade
│   ├───utils
│   │   ├───python_runner.js  # Utility to run python scripts from Node.js
│   ├───app.js  # Application entry point, defines express application and routes
│   
├───test
│   ├───trade_model_test.js  # Test suite for the trade model
│   ├───trade_routes_test.js  # Test suite for trade routes and controllers
│   
├───.env  # Stores environment variables like API keys
├───.gitignore
├───package.json
├───README.md


In ./controllers/trade_controller.js, you'll have functionality that interacts with your Python scripts and can then handle request data and send responses.

Your Rack routes map to these controller actions in ./routes/trade_routes.js, and these routes are imported into your app.js to keep your main file clean and organized.

The ./models/trade_model.js is where your business logic would typically live. It's not required for your Python scripts, but I included it if you expand your application.

The ./utils/python_runner.js will be a simple utility file that allows you to run your Python scripts from Node.js, and capture the stdio output.

In the ./test directory, you'll keep your tests. It's good practice to mirror your src directory structure in your test directory.

Lastly, your .env file is for storing sensitive information like API keys, database URIs, secret keys etc. This file isn't committed to your version-control system.
